@*@model List<CartItemViewModel>*@
@inject IHttpContextAccessor HttpContextAccessor
@model ShoppingCartViewModel
@{
	ViewData["Title"] = "Giỏ hàng";
	var userName = HttpContextAccessor.HttpContext.Session.GetString("UserName");
	// Tính toán tổng giá tiền
	decimal totalPrice = 0;
	var totalWeight = 0;
	foreach (var item in Model.CartItems)
	{
		totalPrice += item.Price * item.Quantity;
	}
	var shippingFee = 0;
	var selectedShippingMethodID = 0;
}
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Your Page Title</title>
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css">
	<style>
		#apply-voucher-btn {
			background-color: #4CAF50; /* Green background color */
			color: white; /* White text color */
			border: none; /* Remove borders */
			padding: 10px 20px; /* Add padding */
			text-align: center; /* Center text */
			text-decoration: none; /* Remove underline */
			display: inline-block;
			margin: 4px 2px; /* Add some margin */
			cursor: pointer; /* Add a pointer cursor on hover */
			border-radius: 4px; /* Rounded corners */
			font-weight: 200;
			font-size: 12px;
		}

			#apply-voucher-btn:hover {
				background-color: #45a049; /* Darker green color on hover */
			}

		.btn-container {
			display: flex;
		}

		.btn-address {
			--color: black;
			font-family: inherit;
			display: inline-block;
			width: 6em;
			height: 2.6em;
			line-height: 2.5em;
			overflow: hidden;
			margin-left: 2%;
			margin-top: 2%;
			margin-bottom: 2%;
			font-size: 15px;
			z-index: 1;
			color: var(--color);
			border: 2px solid var(--color);
			border-radius: 6px;
			position: relative;
		}

			.btn-address::before {
				position: absolute;
				content: "";
				background: var(--color);
				width: 150px;
				height: 200px;
				z-index: -1;
				border-radius: 50%;
			}

			.btn-address:hover {
				color: white;
			}

			.btn-address:before {
				top: 100%;
				left: 100%;
				transition: .3s all;
			}

			.btn-address:hover::before {
				top: -30px;
				left: -30px;
			}

		.cl-checkbox {
			position: relative;
			display: inline-block;
		}


		#closeVoucherDetails {
			display: inline-block; /* hoặc display: block; */
		}

		#voucherDetailsContainer {
			display: block; /* hoặc display: inline-block; */
		}
		/* Input */
		.cl-checkbox > input {
			appearance: none;
			-moz-appearance: none;
			-webkit-appearance: none;
			z-index: -1;
			position: absolute;
			left: -10px;
			top: -8px;
			display: block;
			margin: 0;
			border-radius: 50%;
			width: 40px;
			height: 40px;
			background-color: rgba(0, 0, 0, 0.6);
			box-shadow: none;
			outline: none;
			opacity: 0;
			transform: scale(1);
			pointer-events: none;
			transition: opacity 0.3s, transform 0.2s;
		}

		/* Span */
		.cl-checkbox > span {
			display: inline-block;
			width: 100%;
			cursor: pointer;
		}

			/* Box */
			.cl-checkbox > span::before {
				content: "";
				display: inline-block;
				box-sizing: border-box;
				margin: 3px 11px 3px 1px;
				border: solid 2px;
				/* Safari */
				border-color: rgba(0, 0, 0, 0.6);
				border-radius: 2px;
				width: 18px;
				height: 18px;
				vertical-align: top;
				transition: border-color 0.2s, background-color 0.2s;
			}

			/* Checkmark */
			.cl-checkbox > span::after {
				content: "";
				display: block;
				position: absolute;
				top: 3px;
				left: 1px;
				width: 10px;
				height: 5px;
				border: solid 2px transparent;
				border-right: none;
				border-top: none;
				transform: translate(3px, 4px) rotate(-45deg);
			}

		/* Checked, Indeterminate */
		.cl-checkbox > input:checked,
		.cl-checkbox > input:indeterminate {
			background-color: #018786;
		}

			.cl-checkbox > input:checked + span::before,
			.cl-checkbox > input:indeterminate + span::before {
				border-color: #018786;
				background-color: #018786;
			}

			.cl-checkbox > input:checked + span::after,
			.cl-checkbox > input:indeterminate + span::after {
				border-color: #fff;
			}

			.cl-checkbox > input:indeterminate + span::after {
				border-left: none;
				transform: translate(4px, 3px);
			}

		/* Hover, Focus */
		.cl-checkbox:hover > input {
			opacity: 0.04;
		}

		.cl-checkbox > input:focus {
			opacity: 0.12;
		}

		.cl-checkbox:hover > input:focus {
			opacity: 0.16;
		}

		/* Active */
		.cl-checkbox > input:active {
			opacity: 1;
			transform: scale(0);
			transition: transform 0s, opacity 0s;
		}

			.cl-checkbox > input:active + span::before {
				border-color: #85b8b7;
			}

		.cl-checkbox > input:checked:active + span::before {
			border-color: transparent;
			background-color: rgba(0, 0, 0, 0.6);
		}

		/* Disabled */
		.cl-checkbox > input:disabled {
			opacity: 0;
		}

			.cl-checkbox > input:disabled + span {
				color: rgba(0, 0, 0, 0.38);
				cursor: initial;
			}

				.cl-checkbox > input:disabled + span::before {
					border-color: currentColor;
				}

		.cl-checkbox > input:checked:disabled + span::before,
		.cl-checkbox > input:indeterminate:disabled + span::before {
			border-color: transparent;
			background-color: currentColor;
		}


		/* CSS cho nút "Chi tiết" */
		.button-details {
			display: inline-block;
			padding: 0; /* Bỏ padding để nút chỉ có kích thước của chữ */
			font-size: 14px; /* Kích thước chữ */
			font-weight: bold; /* Độ đậm của chữ */
			text-decoration: none;
			cursor: pointer;
			background-color: #007bff;
			color: #fff;
			border: none; /* Loại bỏ viền */
			border-radius: 5px; /* Bo góc */
			transition: background-color 0.3s, color 0.3s;
		}

			.button-details:hover {
				background-color: #0056b3;
				color: #fff;
			}

	</style>
</head>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<link rel="stylesheet" href="~/css/giohang.css">
<section class="h-100 gradient-custom">
	<div class="container py-5">
		<div class="row d-flex justify-content-center my-4">
			<div class="col-md-8">
				<div class="card mb-4" style="border: 1px solid white;">
					<div class="card-header py-3">
						<h5 class="mb-0">Cart</h5>
					</div>
					@if (!Model.CartItems.Any())
					{
						<h6 style="margin-top:10px; margin-left:15px;">There are no items in your cart.</h6>
					}
					else
					{
						<div class="card-body">
							<!-- Single item -->
							<div class="row">
								@foreach (var item in Model.CartItems)
								{
									var defaultWeight = 500; // Khối lượng mặc định cho mỗi sản phẩm
									var productWeight = defaultWeight * item.Quantity; // Khối lượng của sản phẩm
									totalWeight += productWeight;
									<div class="col-lg-3 col-md-12 mb-4 mb-lg-0">
										<!-- Image -->
										<div class="bg-image hover-overlay hover-zoom ripple rounded" data-mdb-ripple-color="light">
											<img src="@Url.Content("~/image/" + item.ProductImage)" class="w-100" alt="Blue Jeans Jacket" />
											<a href="#!">
												<div class="mask" style="background-color: rgba(251, 251, 251, 0.2)"></div>
											</a>
										</div>
										<!-- Image -->
									</div>
									<div class="col-lg-5 col-md-6 mb-4 mb-lg-0">
										<!-- Data -->
										<p><strong>@item.ProductName</strong></p>
										<p>@item.Description</p>
										<p>Size @item.Size</p>
										<form id="removeCartItemForm_@item.ShoesDetailsID@item.Size" method="post" action="@Url.Action("RemoveCartItem", "Cart")">
											<input type="hidden" name="id" value="@item.ShoesDetailsID" />
											<input type="hidden" name="sizeName" value="@item.Size" />
										</form>
										<!-- Button to remove cart item -->
										<button type="button" class="btn btn-primary btn-sm me-1 mb-2" data-mdb-toggle="tooltip"
										title="Xóa sản phẩm"
										onclick="document.getElementById('removeCartItemForm_@item.ShoesDetailsID@item.Size').submit();">
											<i class="fas fa-trash"></i>
										</button>

									</div>
									<div class="col-lg-4 col-md-6 mb-4 mb-lg-0">
										<!-- Quantity -->
										<div class="d-flex mb-4" style="max-width: 300px;">
											<div class="form-outline" style="margin-left: 72px;">
												<input id="quantity_@item.ShoesDetailsID@item.Size" min="1" max="10" name="quantity" value="@item.Quantity" type="number" class="form-control quantity-input" data-shoesdetailsid="@item.ShoesDetailsID" data-price="@item.Price" data-size="@item.Size" />
											</div>
										</div>

										<!-- Total Price -->
										<p class="text-start text-md-center">
											@{
												var priceItems = item.Price * item.Quantity;
													<span class="total-price ms-auto total-price-span" data-shoesdetailsid="@item.ShoesDetailsID" data-size="@item.Size">@priceItems.ToString("N0")đ</span>
											}
										</p>
										<script>
											window.addEventListener('load', function () {
												// Lấy danh sách tất cả các input
												const quantityInputs = document.querySelectorAll('.quantity-input');

												// Khởi tạo tổng tiền của cả giỏ hàng
												let totalPrice = 0;

												var selectedCheckbox = document.querySelector('.existing-address[data-isdefault="True"]');
												const selectedDistrictId = selectedCheckbox ? parseFloat(selectedCheckbox.closest('.existing-address').dataset.idHuyen) : parseInt(document.getElementById('ListQuanHuyen').value);
												const selectedWardCode = selectedCheckbox ? parseFloat(selectedCheckbox.closest('.existing-address').dataset.idXa) : parseInt(document.getElementById('ListPhuongXa').value);
												// Gọi hàm tính toán phí vận chuyển
												calculateShippingFee(selectedWardCode, selectedDistrictId);
												// Lặp qua từng input
												quantityInputs.forEach(input => {
													const shoesDetailsId = input.getAttribute('data-shoesdetailsid');
													const size = input.getAttribute('data-size');

													input.addEventListener('mousedown', function (event) {
														// Kiểm tra xem có phải là mũi tên điều hướng lên hay không
														const isArrowUpClicked = event.target.type === 'number' && event.clientY < input.getBoundingClientRect().top + input.offsetHeight / 2;

														if (isArrowUpClicked) {
															checkCartItemQuantity(shoesDetailsId, size);
														}
													});
													// Lắng nghe sự kiện input cho từng input
													input.addEventListener('change', function () {
														const price = parseFloat(input.getAttribute('data-price'));
														const quantity = parseInt(input.value);
														//lấy id địa chỉ
														var selectedCheckbox = document.querySelector('.existing-address input[type="checkbox"]:checked');
														const selectedDistrictId = selectedCheckbox ? parseFloat(selectedCheckbox.closest('.existing-address').dataset.idHuyen) : parseInt(document.getElementById('ListQuanHuyen').value);
														const selectedWardCode = selectedCheckbox ? parseFloat(selectedCheckbox.closest('.existing-address').dataset.idXa) : parseInt(document.getElementById('ListPhuongXa').value);

														// Cập nhật giá tiền tương ứng
														const total = price * quantity;
														const totalElement = document.querySelector(`.total-price-span[data-shoesdetailsid="${shoesDetailsId}"][data-size="${size}"]`);
														totalElement.textContent = total.toLocaleString() + "đ";

														// Cập nhật tổng tiền
														totalPrice = 0; // Đặt tổng tiền về 0 trước khi tính toán lại
														quantityInputs.forEach(input => {
															const price = parseFloat(input.getAttribute('data-price'));
															const quantity = parseInt(input.value);
															totalPrice += price * quantity;
														});
														console.log(totalPrice);
														// Cập nhật tổng tiền cả giỏ hàng
														const totalPriceElement = document.getElementById('totalPrice');
														totalPriceElement.textContent = totalPrice.toLocaleString() + "đ";

														var phivanchuyenElement = document.getElementById('phivanchuyen');
														var phivanchuyen = parseFloat(phivanchuyenElement.textContent.replace(/[,.]/g, ''));

														var totalOk = totalPrice + phivanchuyen;

														var tongTienElement = document.querySelector('[name="TongTien"]');
														tongTienElement.innerText = totalOk.toLocaleString('vi-VN') + "đ";

														// Gửi yêu cầu AJAX để cập nhật số lượng trên máy chủ
														updateCartItemQuantity(shoesDetailsId, quantity, size);

														// Gọi hàm tính toán phí vận chuyển
														calculateShippingFee(selectedWardCode, selectedDistrictId);

														// Đặt một khoảng thời gian nhỏ để chờ sự kiện input kết thúc
														setTimeout(function () {
															// lấy id địa chỉ với giá tiền ship mới để cập nhật vào db
															const existingAddressChecked = document.querySelector('.existing-address input[type="checkbox"]:checked');
															if (existingAddressChecked) {
																var addressId = existingAddressChecked.getAttribute('id').split('_')[1];

																// Di chuyển phần lấy giá trị vận chuyển vào đây
																var shippingCostHTML = document.getElementById('shippingCost').value;
																var shippingCost = parseFloat(shippingCostHTML);

																// Gọi hàm cập nhật giá vận chuyển với addressId và shippingCost
																updatePriceShipping(addressId, shippingCost);
															}
														}, 500);
													});
												});
											});

											function updateCartItemQuantity(shoesDetailsId, quantity, size) {
												$.ajax({
													url: '@Url.Action("UpdateCartItemQuantity", "Cart")',
													type: 'POST',
													data: { shoesDetailsId: shoesDetailsId, quantity: quantity, size: size },
													success: function (response) {
														// Cập nhật số lượng thành công
														updateCartItemCount();
													},
													error: function (xhr, textStatus, errorThrown) {
														// Xử lý lỗi (nếu có)
													}
												});
											}

											function updatePriceShipping(addressId, shippingCost) {
												$.ajax({
													url: '@Url.Action("UpdatePriceShipping", "Address")',
													type: 'POST',
													data: { addressId: addressId, shippingCost: shippingCost },
													success: function (response) {
														// Xử lý thành công nếu cần
													},
													error: function (xhr, textStatus, errorThrown) {
														// Xử lý lỗi nếu cần
													}
												});
											}

											function checkCartItemQuantity(shoesDetailsId, size) {
												const selectedDistrictIdElement = document.getElementById('districtIdShow');
												const selectedDistrictId = selectedDistrictIdElement != null ? parseInt(document.getElementById('districtIdShow').textContent) : parseInt(document.getElementById('ListQuanHuyen').value);
												const selectedWardCodeElement = document.getElementById('wardCodeShow');
												const selectedWardCode = selectedWardCodeElement != null ? parseInt(document.getElementById('wardCodeShow').textContent) : parseInt(document.getElementById('ListPhuongXa').value);
												$.ajax({
													url: '@Url.Action("CheckQuantityCart", "Cart")',
													type: 'POST',
													data: { shoesDetailsId: shoesDetailsId, size: size },
													success: function (response) {
														if (response.success === false) {
															// Hiển thị thông báo lỗi
															alert(response.message);

															// Đặt lại giá trị cho ô input
															const quantityInput = document.getElementById('quantity_' + shoesDetailsId + size);
															if (quantityInput) {
																quantityInput.value = quantityInput.value - 1; // Hoặc giá trị mặc định mong muốn
																updateCartItemQuantity(shoesDetailsId, quantityInput.value, size);
																calculateShippingFee(selectedWardCode, selectedDistrictId);
																// Đặt một khoảng thời gian nhỏ để chờ sự kiện input kết thúc
																setTimeout(function () {
																	// lấy id địa chỉ với giá tiền ship mới để cập nhật vào db
																	const existingAddressChecked = document.querySelector('.existing-address[data-isdefault="True"]');
																	if (existingAddressChecked) {
																		var addressId = existingAddressChecked.getAttribute('id').split('_')[1];

																		// Di chuyển phần lấy giá trị vận chuyển vào đây
																		var shippingCostHTML = document.getElementById('shippingCost').value;
																		var shippingCost = parseFloat(shippingCostHTML);

																		// Gọi hàm cập nhật giá vận chuyển với addressId và shippingCost
																		updatePriceShipping(addressId, shippingCost);
																	}
																}, 300);
															}
														}
													},
													error: function (xhr, textStatus, errorThrown) {
														// Xử lý lỗi (nếu có)
													}
												});
											}
										</script>
										<!-- Total Price -->
									</div>
									<hr class="my-4" />
								}
							</div>
							<!-- Single item -->
						</div>
					}
				</div>
				<div id="cart-total-container" style="display:none;">
					<span name="TongKhoiLuong" class="cart-total-weight" id="khoiLuongSum">@totalWeight</span>
				</div>
				<div class="row" id="shipping-address-form-container">
					<div class="col-md-12 mb-4">
						<div class="card mb-4">
							@{
								// Chọn địa chỉ mặc định từ Model
								var defaultAddress = Model.AddressList != null && Model.AddressList.Any() ? Model.AddressList.FirstOrDefault() : null;
							}
							@if (Model.AddressList != null && Model.AddressList.Any())
							{
								<div class="card-header py-3">
									<h5 class="mb-0">Địa chỉ nhận hàng</h5>
								</div>
								@foreach (var item in Model.AddressList)
								{
									<div class="card-body existing-address" id="existingAddress_@item.AddressID" style="display:none;" data-isdefault="@item.IsDefaultAddress.ToString()" data-shipping-cost="@item.ShippingCost" data-id-huyen="@item.DistrictId" data-id-xa="@item.WardCode data" data-shipping-id="@item.ShippingMethodID">
										<p style="display:none;" id="addressIDShow" class="addressId-show">@item.AddressID</p>
										<p style="font-weight:bold; font-size:17px;">@item.FullNameCus</p>
										<p style="font-weight:bold;">@item.PhoneNumber</p>
										<p style="font-weight:bold;">@item.Street, @item.Ward, @item.District, @item.Province</p>
										<p style="display:none;" id="displayShipping" class="shipping-cost">@item.ShippingCost</p>
										<p style="display:none;" id="districtIdShow" class="district-idShow">@item.DistrictId</p>
										<p style="display:none;" id="wardCodeShow" class="ward-codeShow">@item.WardCode</p>
										<p style="display:none;" id="shippingMethodIDShow" class="shipping-methodId">@item.ShippingMethodID</p>
										<div>
											<div>
												<label id="deliveryDateLabel2"><span id="deliveryDateSpan" class="delivery-date"></span></label>
											</div>
										</div>
										<div class="btn-list">
											<label class="cl-checkbox">
												<input type="checkbox" id="cbx_@item.AddressID" class="hidden-xs-up" onclick="setDefaultAddress('@item.AddressID'); showDefaultAddress('@item.AddressID'); calculateDeliveryDate();" style="padding-top:3%;">
												<span>Đặt làm mặc định</span>
											</label>
											<button class="btn-address" style="float:right; margin-top: -5%; margin-right:4%;">
												Sửa địa chỉ
											</button>
										</div>
										<hr>
									</div>
								}
							}
							else
							{
								<p style="font-weight:bold; font-size:17px; margin-left: 2%; margin-top: 2%;">Bạn chưa có địa chỉ nhận hàng, hãy thêm mới hoặc đăng nhập!</p>
							}
							<div class="btn-container">
								<button class="btn-address" onclick="toggleAddressList()">
									Chọn địa chỉ
								</button>
								<button class="btn-address add-new-address">
									Thêm mới
								</button>
							</div>
							<script>
								document.addEventListener('DOMContentLoaded', function () {
									// Lấy giá tiền vận chuyển mặc định khi trang được tải
									var defaultShippingCostElement = $('.existing-address[data-isdefault="True"] .shipping-cost');
									var defaultShippingCost = parseFloat(defaultShippingCostElement.text());
									defaultShippingCost = isNaN(defaultShippingCost) ? 0 : defaultShippingCost;
									// lấy giá tiền gốc
									var totalPriceElement = document.getElementById('totalPrice');
									var totalPriceText = totalPriceElement.innerText;
									var totalPrice = parseInt(totalPriceText.replace(/[^\d]/g, ''));
									// Hiển thị giá tiền mặc định
									var phivanchuyenElement = document.getElementById('phivanchuyen');
									phivanchuyenElement.innerText = defaultShippingCost.toLocaleString('vi-VN') + "đ";
									// hiển thị tổng giá tiền khi trang đc load
									var totalOk = totalPrice + defaultShippingCost;
									var tongTienElement = document.querySelector('[name="TongTien"]');
									tongTienElement.innerText = totalOk.toLocaleString('vi-VN') + "đ";
									// Lắng nghe sự kiện change của tất cả các checkbox
									var checkboxes = document.querySelectorAll('.existing-address input[type="checkbox"]');
									checkboxes.forEach(function (checkbox) {
										checkbox.addEventListener('change', function () {
											updateShippingCost();
											setTimeout(function () {
												// lấy id địa chỉ với giá tiền ship mới để cập nhật vào db
												const existingAddressChecked = document.querySelector('.existing-address input[type="checkbox"]:checked');
												if (existingAddressChecked) {
													var addressId = existingAddressChecked.getAttribute('id').split('_')[1];

													// Di chuyển phần lấy giá trị vận chuyển vào đây
													var shippingCostHTML = document.getElementById('shippingCost').value;
													var shippingCost = parseFloat(shippingCostHTML);

													// Gọi hàm cập nhật giá vận chuyển với addressId và shippingCost
													updatePriceShipping(addressId, shippingCost);
												}
											}, 300);
										});
									});

									// Khởi tạo giá tiền vận chuyển khi trang được tải lần đầu
									updateShippingCost();
									// Đảm bảo rằng dữ liệu đã được load hoàn tất trước khi gọi hàm
									setTimeout(function () {
										calculateDeliveryDate();

										// Tìm checkbox được chọn
										var selectedCheckbox = document.querySelector('.existing-address input[type="checkbox"]:checked');
										var addressIDShowHide = selectedCheckbox ? selectedCheckbox.closest('.existing-address').querySelector('.addressId-show') : null;
										//lưu id của address để hiển thị về sau
										var objAddress = document.getElementById('addressIDSave');
										objAddress.value = addressIDShowHide.textContent;
									}, 300);
								});

								function updateShippingCost() {
									var totalPriceElement = document.getElementById('totalPrice');
									var totalPriceText = totalPriceElement.innerText;
									var totalPrice = parseInt(totalPriceText.replace(/[^\d]/g, ''));
									// Tìm checkbox được chọn
									var selectedCheckbox = document.querySelector('.existing-address input[type="checkbox"]:checked');
									var addressIDShowHide = selectedCheckbox ? selectedCheckbox.closest('.existing-address').querySelector('.addressId-show') : null;
									if (selectedCheckbox) {
										// tính lại giá ship nếu ng dùng đổi địa chỉ
										var wardCode = parseFloat(selectedCheckbox.closest('.existing-address').dataset.idXa);
										var idDistrict = parseFloat(selectedCheckbox.closest('.existing-address').dataset.idHuyen);
										calculateShippingFee(wardCode, idDistrict);
										// Lấy giá trị vận chuyển từ thuộc tính data
										var shippingCost = parseFloat(selectedCheckbox.closest('.existing-address').dataset.shippingCost);

										// Cập nhật giá trị vận chuyển trên trang
										var phivanchuyenElement = document.getElementById('phivanchuyen');
										phivanchuyenElement.innerText = shippingCost.toLocaleString('vi-VN') + "đ";
										// tính tổng tiền khi ng dùng đổi checkbox
										var totalOk = totalPrice + shippingCost;
										var tongTienElement = document.querySelector('[name="TongTien"]');
										tongTienElement.innerText = totalOk.toLocaleString('vi-VN') + "đ";

										//lưu id của address để hiển thị về sau
										var objAddress = document.getElementById('addressIDSave');
										objAddress.value = addressIDShowHide.textContent;
									}
								}
							</script>
							<script>
								// Biến để lưu trữ trạng thái hiển thị của danh sách địa chỉ
								var isAddressListVisible = false;

								// Thiết lập địa chỉ mặc định từ Razor Model
								var selectedAddressId = '@(defaultAddress?.AddressID.ToString() ?? "")';
								document.addEventListener('DOMContentLoaded', function () {
									// Thực hiện ajax request để lấy thông tin địa chỉ mặc định từ server
									$.ajax({
										url: '@Url.Action("GetDefaultAddress", "Address")',
										type: 'GET',
										success: function (response) {
											// Kiểm tra xem có địa chỉ mặc định hay không
											if (response && response.addressId) {
												// Hiển thị địa chỉ mặc định
												showDefaultAddress(response.addressId);
											}

											// Chọn checkbox mặc định
											var defaultCheckbox = document.getElementById('cbx_' + response.addressId);
											if (defaultCheckbox) {
												defaultCheckbox.checked = true;
												lastCheckedCheckbox = defaultCheckbox;
											}
										},
										error: function (xhr, textStatus, errorThrown) {
											// Xử lý lỗi (nếu có)
											console.error('Error:', errorThrown);
										}
									});
								});

								// Hàm hiển thị địa chỉ mặc định
								function showDefaultAddress(addressId) {
									// Ẩn tất cả các địa chỉ
									var addressList = document.querySelectorAll('.existing-address');
									addressList.forEach(function (address) {
										address.style.display = 'none';
									});

									// Hiển thị địa chỉ được chọn
									var selectedAddress = document.getElementById('existingAddress_' + addressId);
									if (selectedAddress) {
										selectedAddress.style.display = 'block';
									}
								}

								// Hàm chuyển đổi trạng thái hiển thị của danh sách địa chỉ
								function toggleAddressList() {
									isAddressListVisible = !isAddressListVisible;

									// Ẩn/Hiện danh sách địa chỉ
									var addressList = document.querySelectorAll('.existing-address');
									addressList.forEach(function (address) {
										address.style.display = isAddressListVisible ? 'block' : 'none';
									});

									// Ẩn form thêm mới
									document.getElementById('newAddressForm').style.display = 'none';
								}

								// Biến để lưu trữ trạng thái của checkbox
								var lastCheckedCheckbox = null;

								function setDefaultAddress(addressId) {
									// Lấy checkbox tương ứng với địa chỉ được chọn
									var selectedCheckbox = document.getElementById('cbx_' + addressId);
									var isCheckboxChecked = selectedCheckbox.checked;

									// Nếu checkbox đã được chọn trước đó, bỏ chọn nó
									if (lastCheckedCheckbox !== null && lastCheckedCheckbox !== selectedCheckbox) {
										lastCheckedCheckbox.checked = false;
									}

									// Chọn checkbox tương ứng với địa chỉ được chọn
									selectedCheckbox.checked = true;

									// Lưu trạng thái của checkbox hiện tại
									lastCheckedCheckbox = selectedCheckbox;

									// Ẩn tất cả các địa chỉ
									var addressList = document.querySelectorAll('.existing-address');
									addressList.forEach(function (address) {
										address.style.display = 'none';
									});

									// Hiển thị địa chỉ được chọn
									var selectedAddress = document.getElementById('existingAddress_' + addressId);
									if (selectedAddress) {
										selectedAddress.style.display = 'block';
									}
									// Thiết lập giá trị cho biến selectedAddressId
									selectedAddressId = addressId;
									//
									$.ajax({
										url: '@Url.Action("SetDefaultAddress", "Address")',
										type: 'POST',
										data: { addressId: addressId },
										success: function (response) {
											// Xử lý thành công (nếu cần)
											console.log('Success:', response);
										},
										error: function (xhr, textStatus, errorThrown) {
											// Xử lý lỗi (nếu có)
											console.error('Error:', errorThrown);
										}
									});
								}
							</script>
							<div class="card-body" id="newAddressForm" style="display:none;">
								<form method="post" action="@Url.Action("AddAddress", "Cart")">
									<div class="form-floating mb-3">
										<input type="text" class="form-control" name="nameUser" placeholder="Họ và tên" required>
										<label for="floatingInputEmail">Họ và tên</label>
									</div>
									<div class="form-floating mb-3">
										<input type="text" class="form-control" name="phoneNumber" placeholder="Số điện thoại" required>
										<label for="floatingInputEmail">Số điện thoại</label>
									</div>
									<div class="row mb-4">
										<div class="col">
											<div class="form-floating mb-3">
												<select class="form-control" id="ListTinh" onchange="updateProvinceValue(this); fetchDistricts(this.value)">
													<option value="" disabled selected>Chọn tỉnh / thành</option>
												</select>
												<label for="floatingInputEmail">Tỉnh/Thành Phố</label>
											</div>
											<input type="hidden" id="ProvinceName" name="provinceName" />
										</div>
										<div class="col">
											<div class="form-floating mb-3">
												<select class="form-control" id="ListQuanHuyen" onchange="updateDistrictValue(this); updateDistrictAndFetchWards()">
													<option value="" disabled selected>Chọn quận / huyện</option>
												</select>
												<label for="floatingInputEmail">Quận/Huyện</label>
											</div>
											<input type="hidden" id="DistrictName" name="districtName" />
										</div>
										<div class="col">
											<div class="form-floating mb-3">
												<select class="form-control" id="ListPhuongXa" onchange="updateWardValue(this); calculateShippingFee(this.value, document.getElementById('ListQuanHuyen').value)">
													<option value="" disabled selected>Chọn xã / phường</option>
												</select>
												<label for="floatingInputEmail">Xã/Phường</label>
											</div>
											<input type="hidden" id="WardName" name="wardName" />
										</div>
										<input style="display:none;" id="shippingCost" name="ShippingCost" />
										<input style="display:none;" id="districtIDCus" name="DistrictID" />
										<input style="display:none;" id="wardCodeCus" name="WardCode" />
										<input style="display:none;" id="shippingMethodID" name="ShippingMethodID" />
									</div>
									<div class="form-floating mb-3">
										<input type="text" class="form-control" name="street" placeholder="Địa chỉ" required>
										<label for="floatingInputEmail">Địa chỉ cụ thể (Số nhà, đường):</label>
									</div>
									<button class="btn-address" type="submit" style="margin-left: 0.5%;">
										Thêm
									</button>
									<div style="padding-right: 300px; display:none;" id="shippingOptionsDiv">
										<label class="radio-button" style="font-size: 14px; display: inline;">
											<input type="radio" name="example-radio" value="option1">
											<span class="radio"></span>
										</label>

										<label class="radio-button" style="font-size: 14px; display:none;">
											<input type="radio" name="example-radio" value="option2">
											<span class="radio"></span>
										</label>
									</div>
									@*									<div>
									<img id="imageShipper" src="~/image/icons8-delivery-25.png" style="padding-left: 10px; display:none;" />
									<label id="deliveryDateLabel1"></label>
									</div>*@
								</form>
							</div>
						</div>
					</div>
				</div>
				<div class="card mb-4 mb-lg-0" style="border: 1px solid white;">
					<div class="card-body">
						<p><strong>We accept</strong></p>
						<img class="me-2" style="width: 45px;"
							 src="https://mdbcdn.b-cdn.net/wp-content/plugins/woocommerce-gateway-stripe/assets/images/visa.svg"
							 alt="Visa" />
						<img class="me-2" style="width: 45px;"
							 src="https://mdbcdn.b-cdn.net/wp-content/plugins/woocommerce-gateway-stripe/assets/images/amex.svg"
							 alt="American Express" />
						<img class="me-2" style="width: 45px;"
							 src="https://mdbcdn.b-cdn.net/wp-content/plugins/woocommerce-gateway-stripe/assets/images/mastercard.svg"
							 alt="Mastercard" />
					</div>
				</div>
			</div>
			<script>
				// Sử dụng sự kiện change để theo dõi sự thay đổi trong selection chọn xã
				const phuongXaSelect = document.getElementById('ListPhuongXa');
				phuongXaSelect.addEventListener('change', function () {
					// Kiểm tra xem xã đã được chọn hay chưa
					const selectedXa = phuongXaSelect.value;
					const shippingOptionsDiv = document.getElementById('shippingOptionsDiv');

					if (selectedXa) {
						// Nếu đã chọn xã, hiển thị radio button
						shippingOptionsDiv.style.display = 'block';
					} else {
						// Nếu xã chưa được chọn, ẩn radio button
						shippingOptionsDiv.style.display = 'none';
					}
				});
			</script>
			<script>
				function updateDistrictAndFetchWards() {
					const selectedDistrict = document.getElementById('ListQuanHuyen').value;
					fetchWards(selectedDistrict);
					calculateShippingFee(document.getElementById('ListPhuongXa').value, selectedDistrict);
				}
			</script>
			<script>
				// Function to fetch province data from API and populate the select element
				function fetchProvinces() {
					// API endpoint URL
					const apiUrl = "https://online-gateway.ghn.vn/shiip/public-api/master-data/province";
					// Token
					const token = "6092d580-fde7-11ed-a967-deea53ba3605";
					// Create headers for the request
					const headers = {
						"Content-Type": "application/json",
						token: token
					};
					// Send GET request to the API
					fetch(apiUrl, {
						method: "GET",
						headers: headers
					})
						.then(response => response.json())
						.then(data => {
							// Process the response data
							if (data && data.data) {
								const provinces = data.data;

								// Get the select element
								const selectElement = document.getElementById("ListTinh");

								// Create and append option elements for each province
								provinces.forEach(province => {
									const option = document.createElement("option");
									option.value = province.ProvinceID;
									option.textContent = province.ProvinceName;
									selectElement.appendChild(option);
								});
							}
						})
						.catch(error => {
							console.error("Error fetching provinces:", error);
						});
				}
				// Update hidden input value when a province is selected
				function updateProvinceValue(selectElement) {
					const provinceName = selectElement.options[selectElement.selectedIndex].text;
					document.getElementById("ProvinceName").value = provinceName;
				}
				// Call the fetchProvinces function to populate the select box
				fetchProvinces();
			</script>
			<script>
				function fetchDistricts(province_id) {
					const districtSelect = document.getElementById('ListQuanHuyen');
					// Clear existing options
					districtSelect.innerHTML = '<option value="" disabled selected>Chọn quận / huyện</option>';
					// Set districtID after creating options
					var districtID = document.getElementById('districtID');

					const url = `https://online-gateway.ghn.vn/shiip/public-api/master-data/district?province_id=${province_id}`;
					const token = '6092d580-fde7-11ed-a967-deea53ba3605';

					fetch(url, {
						method: 'GET',
						headers: {
							'Content-Type': 'application/json',
							'token': token
						}
					})
						.then(response => response.json())
						.then(data => {
							// Add districts to the dropdown list
							data.data.forEach(district => {
								const option = document.createElement('option');
								option.value = district.DistrictID;
								option.textContent = district.DistrictName;
								districtSelect.appendChild(option);
							});
							// Trigger change event to update wards
							districtSelect.dispatchEvent(new Event('change'));
						})
						.catch(error => console.log(error));
				}
				// Update hidden input value when a province is selected
				function updateDistrictValue(selectElement) {
					const districtName = selectElement.options[selectElement.selectedIndex].text;
					const districtId = selectElement.value;
					document.getElementById("DistrictName").value = districtName;
					document.getElementById("districtIDCus").value = districtId;
				}
				fetchDistricts();
			</script>
			<script>
				function fetchWards(district_id) {
					const wardSelect = document.getElementById('ListPhuongXa');
					// Clear existing options
					wardSelect.innerHTML = '<option value="" disabled selected>Chọn xã / phường</option>';

					const url = `https://online-gateway.ghn.vn/shiip/public-api/master-data/ward?district_id=${district_id}`;
					const token = '6092d580-fde7-11ed-a967-deea53ba3605';

					fetch(url, {
						method: 'GET',
						headers: {
							'Content-Type': 'application/json',
							'token': token
						}
					})
						.then(response => response.json())
						.then(data => {
							// Add wards to the dropdown list
							data.data.forEach(ward => {
								const option = document.createElement('option');
								option.value = ward.WardCode;
								option.textContent = ward.WardName;
								wardSelect.appendChild(option);
							});
							// Trigger change event to update shipping fee
							wardSelect.dispatchEvent(new Event('change'));
						})
						.catch(error => console.log(error));
				}
				// Update hidden input value when a province is selected
				function updateWardValue(selectElement) {
					const wardName = selectElement.options[selectElement.selectedIndex].text;
					const wardCode = selectElement.value;
					document.getElementById("WardName").value = wardName;
					document.getElementById("wardCodeCus").value = wardCode;
				}
			</script>
			<script>
				// Hàm để cập nhật hình thức vận chuyển và thời gian dự kiến
				function updateShippingOptions() {
					// Lấy giá trị từ ListQuanHuyen
					var listQuanHuyen = document.getElementById('ListQuanHuyen');
					var selectedOption = listQuanHuyen.options[listQuanHuyen.selectedIndex];
					var toDistrict = selectedOption.value;

					// Nếu không có giá trị mới từ ListQuanHuyen, sử dụng giá trị từ districtIdShow
					if (!toDistrict) {
						toDistrict = parseInt(document.getElementById('districtIdShow').textContent);
					}
					var toHuyen = parseInt(toDistrict);
					console.log('Huyen oad', toHuyen);
					// Gọi API để cập nhật hình thức vận chuyển
					fetch(`https://online-gateway.ghn.vn/shiip/public-api/v2/shipping-order/available-services?shop_id=4185066&from_district=3440&to_district=${toHuyen}`, {
						method: 'GET',
						headers: {
							'Content-Type': 'application/json',
							'token': '6092d580-fde7-11ed-a967-deea53ba3605'
						}
					})
						.then(response => response.json())
						.then(data => {
							var shippingMethods = data.data;
							var shippingOptionsDiv = document.getElementById('shippingOptionsDiv');

							// Cập nhật hình thức vận chuyển
							var firstLabel = shippingOptionsDiv.querySelector('.radio-button:nth-child(1)');
							firstLabel.innerHTML = 'Hình thức vận chuyển: ' + shippingMethods[0].short_name;
							firstLabel.style.fontSize = '16px';
							firstLabel.style.fontWeight = 'bold';
							selectedShippingMethodID = shippingMethods[0].service_id;
							console.log(selectedShippingMethodID);
							// Ẩn dòng thứ hai
							var secondLabel = shippingOptionsDiv.querySelector('.radio-button:nth-child(2)');
							secondLabel.style.display = 'none';

							// Hiển thị "shippingOptionsDiv" sau khi có dữ liệu
							shippingOptionsDiv.style.display = 'block';

							// Gọi hàm tính toán ngày nhận hàng dự kiến
							calculateDeliveryDate();
							document.getElementById('shippingMethodID').value = shippingMethods[0].service_id;
						})
						.catch(error => {
							console.error('Error:', error);
						});
				}
				// Sự kiện khi có sự thay đổi ở các textbox chọn địa chỉ hoặc khi trang web được tải lần đầu
				document.getElementById('ListQuanHuyen').addEventListener('change', updateShippingOptions);
				document.getElementById('ListPhuongXa').addEventListener('change', updateShippingOptions);

				// Hàm tính toán ngày nhận hàng dự kiến
				function calculateDeliveryDate() {
					// Gọi hàm getLeadTime() để lấy thời gian dự kiến nhận hàng
					getLeadTime().then(leadTime => {
						if (leadTime !== null) {
							// Thời điểm Epoch (ngày 1 tháng 1 năm 1970) theo múi giờ UTC
							var epochTimeUTC = new Date("1970-01-01T00:00:00Z");

							// Chuyển leadTime thành mili giây và thêm vào thời điểm Epoch theo múi giờ UTC
							var deliveryDateUTC = new Date(epochTimeUTC.getTime() + (leadTime * 1000));

							// Điều chỉnh thời gian dự kiến nhận hàng sang múi giờ Việt Nam (UTC+7)
							var deliveryDateVietnam = new Date(deliveryDateUTC.getTime() + (7 * 60 * 60 * 1000));

							// Trích xuất ngày, tháng và năm từ thời gian dự kiến
							var day = deliveryDateVietnam.getDate();
							var month = deliveryDateVietnam.getMonth() + 1; // Tháng trong JavaScript bắt đầu từ 0, cần cộng thêm 1.
							var year = deliveryDateVietnam.getFullYear();

							// Tạo chuỗi định dạng "dd-mm-yyyy"
							var formattedDate = day + '-' + (month < 10 ? '0' : '') + month + '-' + year;

							var deliveryDateSpanElement = document.querySelector('.existing-address input[type="checkbox"]:checked');
							var deliveryDateSpan = deliveryDateSpanElement ? deliveryDateSpanElement.closest('.existing-address').querySelector('.delivery-date') : null;
							if (deliveryDateSpan) {
								deliveryDateSpan.innerHTML = 'Ngày nhận hàng dự kiến: ' + formattedDate;
								deliveryDateSpan.style.paddingTop = '10px';
								deliveryDateSpan.style.fontWeight = 'bold';
							} else {
								console.log('Không tìm thấy phần tử deliveryDateSpan.');
							}
							//lưu vào db khi thanh toán
							var deliveryDateSaveHTML = document.getElementById('deliveryDateSave');
							deliveryDateSaveHTML.value = formattedDate;
						}
					});
				}

				// Hàm để lấy thời gian dự kiến nhận hàng
				function getLeadTime() {
					var checkedCheckbox = document.querySelector('.existing-address input[type="checkbox"]:checked');
					var toDistrictIdElement = checkedCheckbox ? checkedCheckbox.closest('.existing-address').querySelector('.district-idShow') : null;
					var toDistrictId = toDistrictIdElement ? parseFloat(toDistrictIdElement.textContent) : parseFloat(document.getElementById('ListQuanHuyen').value);
					console.log('Id huyen', toDistrictId);

					var toWardCodeElement = checkedCheckbox ? checkedCheckbox.closest('.existing-address').querySelector('.ward-codeShow') : null;
					var toWardCode = toWardCodeElement ? parseFloat(toWardCodeElement.textContent) : parseFloat(document.getElementById('ListPhuongXa').value);
					console.log('Id xa', toWardCode);

					var toMethodShipIdElement = checkedCheckbox ? checkedCheckbox.closest('.existing-address').querySelector('.shipping-methodId') : null;
					var methodId = toMethodShipIdElement ? parseFloat(toMethodShipIdElement.textContent) : selectedShippingMethodID;
					console.log('Id ship', methodId);
					return fetch(`https://online-gateway.ghn.vn/shiip/public-api/v2/shipping-order/leadtime?from_district_id=3440&from_ward_code=13010&to_district_id=${toDistrictId}&to_ward_code=${toWardCode}&service_id=${methodId}`, {
						method: 'GET',
						headers: {
							'Content-Type': 'application/json',
							'token': '6092d580-fde7-11ed-a967-deea53ba3605',
							'shop_id': '4185066'
						}
					})
						.then(response => response.json())
						.then(data => {
							console.log(data.data.leadtime);
							return data.data.leadtime;
						})
						.catch(error => {
							console.error('Error:', error);
							return null;
						});
				}
			</script>
			<script>
				let isNewAddressClicked = false;
				function showExistingAddress() {
					var existingAddresses = document.getElementsByClassName('existing-address');
					for (var i = 0; i < existingAddresses.length; i++) {
						existingAddresses[i].style.display = 'block';
					}
					document.getElementById('newAddressForm').style.display = 'none';
				}

				$('.add-new-address').click(function () {
					isNewAddressClicked = true;
					isAddingNewAddress = true;
					var existingAddresses = document.getElementsByClassName('existing-address');
					for (var i = 0; i < existingAddresses.length; i++) {
						existingAddresses[i].style.display = 'none';
					}
					document.getElementById('newAddressForm').style.display = 'block';
					console.log("isNewAddressClicked:", isNewAddressClicked);
				});

				function calculateShippingFee(to_ward_code, to_district_id) {
					var totalPriceElement = document.getElementById('totalPrice');
					var totalPriceText = totalPriceElement.innerText;
					var totalPrice = parseInt(totalPriceText.replace(/[^\d]/g, ''));

					var totalWeight = document.getElementById('khoiLuongSum');
					var totalWeightText = totalWeight.innerText;
					var totalWeightSum = parseInt(totalWeightText.replace(/[^\d]/g, ''));
					// lấy id hình thức giao từ db
					var selectedCheckbox = document.querySelector('.existing-address input[type="checkbox"]:checked');
					const ShippingMethodID = selectedCheckbox ? parseFloat(selectedCheckbox.closest('.existing-address').dataset.shippingId) : "0";
					console.log('laugh', ShippingMethodID);
					// Xây dựng URL dựa trên việc người dùng có click "Thêm mới" hay không
					const url = isNewAddressClicked
						? `https://online-gateway.ghn.vn/shiip/public-api/v2/shipping-order/fee?service_id=${selectedShippingMethodID}&insurance_value=${totalPrice}&coupon&to_ward_code=${to_ward_code}&to_district_id=${to_district_id}&from_district_id=3440&weight=${totalWeightSum}&length=38&width=15&height=15`
						: `https://online-gateway.ghn.vn/shiip/public-api/v2/shipping-order/fee?service_id=${ShippingMethodID}&insurance_value=${totalPrice}&coupon&to_ward_code=${to_ward_code}&to_district_id=${to_district_id}&from_district_id=3440&weight=${totalWeightSum}&length=38&width=15&height=15`;
					const token = '6092d580-fde7-11ed-a967-deea53ba3605';
					const shop_id = '4185066';

					fetch(url, {
						method: 'GET',
						headers: {
							'Content-Type': 'application/json',
							'token': token,
							'shop_id': shop_id
						}
					})
						.then(response => response.json())
						.then(data => {
							console.log(data);
							const wardSelect = document.getElementById('phivanchuyen');
							wardSelect.innerHTML = data.data.total.toLocaleString('vi-VN') + "đ";
							// giá trị cho input
							var shippingFee = data.data.total;
							document.getElementById('shippingFee').value = shippingFee;
							document.getElementById('shippingCost').value = shippingFee;
							console.log('phi ship la', shippingFee);
							//
							var totalOk = totalPrice + shippingFee;
							var tongTienElement = document.querySelector('[name="TongTien"]');
							tongTienElement.innerText = totalOk.toLocaleString('vi-VN') + "đ";
						})
						.catch(error => console.log(error));
				}
			</script>
			<div class="col-md-4">
				<div class="card mb-4" style="border: 1px solid white;">
					<div class="card-header py-3">
						<h5 class="mb-0">Summary</h5>
					</div>
					<div class="card-body" style="border: 1px solid white;">
						<div id="total-price">
							<ul class="list-group list-group-flush">
								<li class="list-group-item d-flex justify-content-between align-items-center px-0">
									<div>
										<p>Voucher: <span id="code-voucher" style="margin-left: 45px;"></span></p>
									</div>
									<div>
										<button type="button" id="searchVoucherBtn1"
												class="btn btn-primary"
												data-bs-toggle="modal"
												data-bs-target="#voucherModal" style="background: black; color: white">
											Chọn voucher
										</button>
									</div>

									<!-- Modal -->
									<div class="modal fade"
										 id="voucherModal"
										 tabindex="-1"
										 aria-labelledby="voucherModalLabel"
										 aria-hidden="true">
										<div class="modal-dialog">
											<div class="modal-content">
												<div class="modal-header">
													<h5 class="modal-title" id="voucherModalLabel">Chọn voucher</h5>
													<button type="button"
															class="btn-close"
															data-bs-dismiss="modal"
															aria-label="Close"></button>
												</div>

												<div class="modal-body">
													<form id="searchForm" class="row g-2">
														<div class="col">
															<input type="text" class="form-control" id="voucherCodeInput" name="voucherCode" />
														</div>
														<div class="col-auto">
															<button type="button" class="btn btn-primary" id="searchVoucherBtn">Tìm kiếm</button>
														</div>
													</form>
													<br />
													<ul class="list-group" id="voucherList">
														<!-- Danh sách voucher sẽ được thêm vào đây bằng JavaScript -->
													</ul>
												</div>
												<div class="modal-footer">
													<button type="button"
															class="btn btn-secondary"
															data-bs-dismiss="modal">
														Đóng
													</button>
													<button type="button"
															class="btn btn-primary"
															id="apply-voucher-btn">
														Áp dụng voucher
													</button>
												</div>
											</div>
										</div>

										<div id="voucherDetailsContainer">
										</div>


										<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>

										<script>
											$(document).ready(function () {

												$("#searchVoucherBtn1").click(function () {
													var username = $("#userNameLi").html().trim();
													if (!username) {
														username = null;
													}
													$.ajax({
														type: "GET",
														url: "https://localhost:7036/api/Voucher/get-voucher-for-username?username=" + username,
														dataType: 'json',
														success: function (data) {
															console.log("Data from API:", data);

															// Xóa danh sách voucher cũ
															$("#voucherList").empty();

															// Lặp qua mảng data trong JavaScript
															for (var i = 0; i < data.length; i++) {
																var voucher = data[i];
																console.log("Current Voucher:", voucher);
																var voucherHtml = `
																												<li class="list-group-item d-flex justify-content-between align-items-center">
																													<div style="display: flex">
																														<img src="/image/voucher.jpg"
																															width="85"
																															alt="totoprayogo.com"
																															class="" />
																															<div style="margin-left: 10px ">
																															<p style="display:none">ID: ${voucher.voucherID}</p>
																															<p>Mã ${voucher.voucherCode} giảm  ${voucher.voucherValue}Đ trên hóa đơn  ${voucher.total}Đ</p>
																															<p>Ngày hết hạn: ${formatDate(voucher.expirationDate)}</p>
																															<p>Hạng: ${voucher.exclusiveright}</p>
																															<p style="display:none">Giá trị: ${voucher.VoucherValue}</p>
																															<p style="display:none">Total: ${voucher.Total}</p>
																															<p style="display:none">Max Usage: ${voucher.MaxUsage}</p>
																															<p style="display:none">Remaining Usage: ${voucher.RemainingUsage}</p>

																															<p style="display:none">Status: ${voucher.Status}</p>
																															<p style="display:none">Ngày tạo: ${voucher.DateCreated}</p>
																															<p style="display:none">IsDel: ${voucher.IsDel}</p>
																															<p style="display:none">Create Date: ${voucher.CreateDate}</p>
																															<p style="display:none">Type: ${voucher.Type}</p>
																															<p style="display:none">Tên khách hàng: ${voucher.UserNameCustomer}</p>
																																										<p><a href="#" class="button-details" data-voucher-id="${voucher.voucherID}">Chi tiết</a></p>

																														</div>
																													</div>
																													<div style="margin-top: 25px">
																													<input type="radio" style="width: 20px; height: 20px; margin-top: -40px;" name="selectedVoucher" value="${voucher.voucherCode}" />
																													</div>
																												</li>`;

																$("#voucherList").append(voucherHtml);
															}
														},

														error: function (error) {
															console.error("Lỗi khi lấy voucher:", error);
														},
														complete: function () {
															console.log("Request hoàn tất.");
														}
													});
												});

												$("#voucherList").on("click", ".button-details", function (event) {
													event.preventDefault();

													// Lấy ID của voucher từ thuộc tính data
													var voucherId = $(this).data("voucher-id");

													// Thực hiện Ajax request để lấy chi tiết voucher
													$.ajax({
														type: "GET",
														url: "https://localhost:7120/Voucher/Details/" + voucherId,
														success: function (data) {
															// Xóa nội dung hiện tại (nếu cần)
															// $("#voucherDetailsContainer").empty();

															// Chèn chi tiết voucher vào container
															$("#voucherDetailsContainer").html($(data).find(".voucher-details"));

															// Always show the close button
															$("#voucherDetailsContainer").append('<button id="closeVoucherDetails">Đóng</button>');
														},
														error: function (error) {
															console.error("Lỗi khi lấy chi tiết voucher:", error);
														}
													});
												});

												$("#voucherDetailsContainer").on("click", "#closeVoucherDetails", function () {
													// Hide the voucher details container
													$("#voucherDetailsContainer").hide();
												});

												function formatDate(dateString) {
													const options = { year: 'numeric', month: '2-digit', day: '2-digit' };

													// Chuyển đổi chuỗi ngày thành đối tượng Date
													const dateObject = new Date(dateString);

													// Lấy các thành phần của ngày
													const year = dateObject.getFullYear();
													const month = (dateObject.getMonth() + 1).toString().padStart(2, '0'); // Thêm số 0 phía trước nếu cần
													const day = dateObject.getDate().toString().padStart(2, '0'); // Thêm số 0 phía trước nếu cần

													// Tạo chuỗi ngày mới
													const formattedDate = `${year}-${month}-${day}`;

													return formattedDate;
												}


												$("#apply-voucher-btn").off("click").on("click", function () {
													var selectedVoucherCode = $("input[name='selectedVoucher']:checked").val();

													if (selectedVoucherCode) {
														$.ajax({
															type: "GET",
															url: "https://localhost:7036/api/Voucher/find-voucher",
															data: { code: selectedVoucherCode },
															dataType: 'json',
															success: function (result) {
																if (result && result.length > 0 && result[0]) {
																	if (result[0].status == 0) {
																		var startDate = new Date(result[0].dateCreated);
																		var currentDate = new Date();

																		if (startDate > currentDate) {
																			alert("Voucher chưa có hiệu lực vì ngày bắt đầu chưa đến.");
																		} else {
																			if (result[0].voucherValue != null) {
																				var sanPhamPriceHTML = document.getElementById('totalPrice').textContent;
																				var regexSanPhamPriceHTML = sanPhamPriceHTML.replace(/[,.]/g, '');
																				var sanphamPrice = parseFloat(regexSanPhamPriceHTML);

																				var priceShipHTML = document.getElementById('phivanchuyen').textContent;
																				var regexPriceShipHTML = priceShipHTML.replace(/[,.]/g, '');
																				var priceShip = parseFloat(regexPriceShipHTML);

																				var totalAll = parseFloat(sanphamPrice + priceShip);

																				if (totalAll < result[0].total) {
																					alert("Tổng giá trị đơn hàng chưa thoả mãn điều kiện");
																				} else {
																					var rankName = "@Model.RankName".trim();
																					var exclusiveright = result[0].exclusiveright.trim();

																					function decodeEntities(encodedString) {
																						var textArea = document.createElement('textarea');
																						textArea.innerHTML = encodedString;
																						return textArea.value;
																					}

																					var decodedRankName = decodeEntities(rankName);
																					var decodedExclusiveright = decodeEntities(exclusiveright);

																					if (
																						(decodedRankName === decodedExclusiveright && decodedExclusiveright === "Không") ||
																						(decodedRankName === "Hạng vàng" && decodedExclusiveright === "Không") ||
																						(decodedRankName === "Hạng bạc" && decodedExclusiveright === "Không") ||
																						(decodedRankName === "Hạng kim cương" && decodedExclusiveright === "Không") ||
																						(decodedRankName === decodedExclusiveright)
																					) {
																						var voucherDiscount = parseFloat(result[0].voucherValue);
																						totalAll -= voucherDiscount;

																						$("#total-price-payment").text(totalAll.toLocaleString('vi-VN') + "đ");
																						$("#code-voucher").text(result[0].voucherCode);
																						$("#giamgia").text(voucherDiscount.toLocaleString('vi-VN') + "đ");

																						alert("Áp dụng voucher thành công!");

																						var idVoucher = $("#voucherId");
																						idVoucher.val(result[0].voucherID);

																					} else {
																						alert("Bạn không đủ điều kiện để sử dụng voucher này.");
																					}
																				}
																			} else {
																				console.log("Lỗi: result[0].voucherValue không có giá trị.");
																			}
																		}
																	} else {
																		alert("Voucher không có hiệu lực do đã ngừng hoạt động.");
																	}
																} else {
																	console.log("Lỗi: Dữ liệu từ máy chủ không hợp lệ.");
																}
															},
															error: function (error) {
																console.log("Lỗi Ajax:", error);
															}
														});
													} else {
														alert("Vui lòng chọn một voucher để áp dụng.");
													}
												});

												$("#searchVoucherBtn").click(function () {
													var voucherCode = $("#voucherCodeInput").val();
													var voucherList = $("#voucherList");

													if (voucherCode) {
														$.ajax({
															type: "GET",
															url: "https://localhost:7036/api/Voucher/find-voucher",
															data: { code: voucherCode },
															dataType: 'json',
															success: function (result) {
																voucherList.empty();

																if (result && result.length > 0) {
																	result.forEach(function (voucher) {
																		if (voucher.voucherCode === voucherCode) {
																			var voucherHtml = `
																															<li class="list-group-item d-flex justify-content-between align-items-center">
																																 <div style="display: flex">
																																		<img src="/image/voucher.jpg"
																																		width="85"
																																		alt="totoprayogo.com"
																																		class="" />
																																		<div style="margin-left: 10px">
																																		<p style="display:none">ID: ${voucher.voucherID}</p>
																																		<p>Mã ${voucher.voucherCode} giảm  ${voucher.voucherValue} đ trên hóa đơn  ${voucher.total} đ</p>
																																		<p>Ngày hết hạn: ${formatDate(voucher.expirationDate)}</p>
																																		<p>Hạng: ${voucher.exclusiveright}</p>
																																		<p style="display:none">Giá trị: ${voucher.VoucherValue}</p>
																																		<p style="display:none">Total: ${voucher.Total}</p>
																																		<p style="display:none">Max Usage: ${voucher.MaxUsage}</p>
																																		<p style="display:none">Remaining Usage: ${voucher.RemainingUsage}</p>
																																		<p style="display:none">Status: ${voucher.Status}</p>
																																		<p style="display:none">Ngày tạo: ${voucher.DateCreated}</p>
																																		<p style="display:none">IsDel: ${voucher.IsDel}</p>
																																		<p style="display:none">Create Date: ${voucher.CreateDate}</p>
																																		<p style="display:none">Type: ${voucher.Type}</p>
																																		<p style="display:none">Tên khách hàng: ${voucher.UserNameCustomer}</p>
																																		<p><a href="#" class="button-details" data-voucher-id="${voucher.voucherID}">Chi tiết</a></p>
																																		</div>
																																	</div>
																																		<div style="margin-top: 25px">
																															<input type="radio" style="width: 20px; height: 20px; margin-top: -40px;" name="selectedVoucher" value="${voucher.voucherCode}" />
																															</div>
																															</li>`;

																			voucherList.append(voucherHtml);
																		}
																	});

																	if (voucherList.children().length > 0) {
																		alert("Đã tìm thấy mã voucher " + voucherCode);
																		voucherList.show();

																	}
																} else {

																	alert("Không tìm thấy voucher nào với mã " + voucherCode);

																}
															},
															error: function (error) {
																console.log("Lỗi Ajax:", error);
															}
														});
													} else {
														alert("Vui lòng nhập mã voucher để tìm kiếm.");
													}
												});



												$("#voucherCodeInput").keypress(function (e) {
													if (e.which === 13) { // Enter key
														$("#searchVoucherBtn").click();
													}
												});
											});
										</script>
									</div>
								</li>
								<li class="list-group-item d-flex justify-content-between align-items-center border-0 px-0 pb-0">
									Tổng giá sản phẩm
									<div id="cart-total-container">
										<span class="cart-total-sub" id="totalPrice">@totalPrice.ToString("N0")đ</span>
									</div>
								</li>
								<li class="list-group-item d-flex justify-content-between align-items-center border-0 px-0 pb-0">
									Phí vận chuyển
									<span id="phivanchuyen">@Html.Raw(shippingFee)</span>
								</li>
								<li class="list-group-item d-flex justify-content-between align-items-center border-0 px-0 pb-0">
									Giảm giá
									<span id="giamgia">0đ</span>
								</li>

								@if (string.IsNullOrEmpty(userName))
								{
									<li class="list-group-item d-flex justify-content-between align-items-center border-0 px-0 pb-0">
										@Html.Raw(userName?.Replace("\"", ""))
									</li>
								}
								<li class="list-group-item d-flex justify-content-between align-items-center border-0 px-0 mb-3">
									<div>
										<strong>Tổng</strong>
									</div>
									<div id="cart-total-container">
										<span name="TongTien" id="total-price-payment" class="cart-total-all" style="font-weight:bold;"></span>
									</div>
								</li>
							</ul>
						</div>
						<form method="post" action="@Url.Action("CheckoutOk", "Cart")" id="checkout-form" style="margin-top:15px;">
							<input type="number" id="shippingFee" name="shippingFee" style="display:none;">
							<input type="text" id="voucherId" name="voucherID" style="display:none;">
							<input type="text" id="deliveryDateSave" name="deliveryDateSave" style="display:none;">
							<input type="text" id="addressIDSave" name="addressIDSave1" style="display:none;">
							<div class="form-group">
								<input type="hidden" id="total-price" name="TongTien" value="">
							</div>
							<div class="form-group" style="display:none;">
								<input type="radio" id="paid" name="HinhThucThanhToan" value="Thanh toán khi nhận hàng" checked>
								<label for="paid">Thanh toán khi nhận hàng</label>
								<br />
								<input type="radio" id="not-paid1" name="HinhThucThanhToan" value="Thanh toán trực tuyến VNPay">
								<label for="not-paid">Thanh toán trực tuyến VNPay</label>
							</div>
							<button class="btn1 btn-danger text mr-2 px-4" type="submit"
									style="width: 355px; height: 45px; border-radius: 25px; color: white; background-color: black; margin-top:15px;">
								Xác Nhận Đặt Hàng
							</button>
							@*<div>
							<p>Cấp bậc của bạn: @Model.RankName</p>
							</div>*@
							<script>
								$(document).ready(function () {
									$("#checkout-form").submit(function (event) {
										// Ngăn chặn mặc định của form
										//event.preventDefault();

										// Lấy voucherId từ trường ẩn
										var a = $("#voucherId").val();
										console.log(a)
										// Kiểm tra xem voucherId có tồn tại không
										if (!a) {
											console.log("Voucher ID không hợp lệ");
											return;
										}

										// Thực hiện AJAX để cập nhật số lượng voucher
										$.ajax({
											type: "GET",
											url: "https://localhost:7036/api/Voucher/update-quantity",
											contentType: "application/json", // Thêm dòng này để chỉ định kiểu dữ liệu của nội dung
											data: { voucherId: a },
											success: function (result) {
												// Xử lý kết quả nếu cần thiết
												console.log("Cập nhật số lượng voucher thành công");

												// Kiểm tra trạng thái của AJAX
												if (result && result.success) {
													// Tiếp tục với bước xác nhận đặt hàng
													// Ví dụ: Hiển thị thông báo hoặc chuyển hướng đến trang cảm ơn

													// Submit form sau khi đã xử lý xong
													submitCheckoutForm();
												} else {
													console.log("Lỗi khi cập nhật số lượng voucher");
												}
											},
											error: function (error) {
												console.log("Lỗi Ajax:", error);

												// Nếu có lỗi, bạn có thể xử lý tùy thuộc vào yêu cầu của bạn
											}
										});
									});
								});

								// Hàm để submit form sau khi đã xử lý xong
								function submitCheckoutForm() {
									// Đảm bảo rằng đã cập nhật số lượng voucher thành công trước khi submit form
									console.log("submitCheckoutForm được gọi");
									$("#checkout-form")[0].submit();
								}
							</script>

						</form>
					</div>
				</div>
			</div>
		</div>
	</div>
	</div>
</section>
<div class="shell">
	<div class="container">
		<div class="tieude1" style="padding-bottom: 8px;">
			<h3>Có thể bạn quan tâm</h3>
		</div>
		<div class="row">
			<div class="col-md-3">
				<div class="wsk-cp-product">
					<div class="wsk-cp-img">
						<img src="/image/anh26.png" alt="Product" class="img-responsive" />
					</div>
					<div class="wsk-cp-text">
						<div class="category">
							<span>View</span>
						</div>
						<div class="title-product">
							<h3>Nike ZoomX Vaporfly</h3>
						</div>
						<div class="description-prod">
							<p>Men's Road Racing Shoesk NEXT% 2</p>
						</div>
						<div class="card-footer" style="padding-left: 38px;">
							<div class="wcf-left">
								<span class="price" style="color: red; font-size: 16px;">
									5,617,649đ <del style="color: black; font-size: 16px;"> 6.408.000đ</del>
								</span>
							</div>
						</div>
					</div>
				</div>
			</div>
			<div class="col-md-3">
				<div class="wsk-cp-product">
					<div class="wsk-cp-img">
						<img src="/image/anh27.png" alt="Product" class="img-responsive" />
					</div>
					<div class="wsk-cp-text">
						<div class="category">
							<span>View</span>
						</div>
						<div class="title-product">
							<h3>Nike Pegasus Trail 3</h3>
						</div>
						<div class="description-prod">
							<p>Men's Trail-Running Shoes</p>
						</div>
						<div class="card-footer" style="padding-left: 38px;">
							<div class="wcf-left">
								<span class="price" style="color: red; font-size: 16px;">
									3,829,000đ <del style="color: black; font-size: 16px;"> 4.205.000đ</del>
								</span>
							</div>
						</div>
					</div>
				</div>
			</div>
			<div class="col-md-3">
				<div class="wsk-cp-product">
					<div class="wsk-cp-img">
						<img src="/image/anh28.png" alt="Product" class="img-responsive" />
					</div>
					<div class="wsk-cp-text">
						<div class="category">
							<span>View</span>
						</div>
						<div class="title-product">
							<h3>Nike Heritage</h3>
						</div>
						<div class="description-prod">
							<p>Drawstring Bag (13L)</p>
						</div>
						<div class="card-footer" style="padding-left: 50px;">
							<div class="wcf-left">
								<span class="price" style="color: red; font-size: 16px;">
									509,000đ <del style="color: black; font-size: 16px;"> 699.000đ</del>
								</span>
							</div>
						</div>
					</div>
				</div>
			</div>
			<div class="col-md-3">
				<div class="wsk-cp-product">
					<div class="wsk-cp-img">
						<img src="/image/anh29.png" alt="Product" class="img-responsive" />
					</div>
					<div class="wsk-cp-text">
						<div class="category">
							<span>View</span>
						</div>
						<div class="title-product">
							<h3>Nike React Infinity Run</h3>
						</div>
						<div class="description-prod">
							<p>Men's Road Running Shoes</p>
						</div>
						<div class="card-footer" style="padding-left: 38px;">
							<div class="wcf-left">
								<span class="price" style="color: red; font-size: 16px;">
									3,747,649đ <del style="color: black; font-size: 16px;"> 4.409.000đ</del>
								</span>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js"
		integrity="sha384-BBtl+eGJRgqQAUMxJ7pMwbEyER4l1g+O15P+16Ep7Q9Q+zqX6gSbd85u4mG4QzX+"
		crossorigin="anonymous"></script>